/* Author: Mike van Rossum 

Normally I minify my front end code, but in this case 
it also serves as a showcase.

*/

(function(d, c){
  // redirect
  // here for legacy reasons
  var pages = ['blog', 'portfolio', 'projects']
    , hash = location.hash
    , page;

  if( hash ) {
    for( var len = pages.length; len--; ) {
      page = pages[len];
      if( hash.indexOf( page ) !== -1 ) {
        location = 'http://mvr.me/' + page + '/';
      }
    }
  }

  // add email address
  var emailElems = d.getElementsByClassName( 'email' )
    , len = emailElems.length
    , elem
    , email = 'mi' + 'ke@' + 'mikevanross' + 'um.nl'
    ;
  while( len-- ) {
    elem = emailElems[len];
    if(elem.tagName === 'A') {
      elem.setAttribute( 'hre' + 'f', 'mai' + 'lto' + ':' + email );
      if(elem.innerHTML === 'email') {
        elem.innerHTML = email;
      }
    }
  }


  /*

        GAME

  */

  //helpers
  var getHeight = function() {
    var D = document;
    return Math.max(
        Math.max(D.body.scrollHeight, D.documentElement.scrollHeight),
        Math.max(D.body.offsetHeight, D.documentElement.offsetHeight),
        Math.max(D.body.clientHeight, D.documentElement.clientHeight)
    );
  };

  var getWidth = function() {
    var D = document;
    return Math.max(
        Math.max(D.body.scrollWidth, D.documentElement.scrollWidth),
        Math.max(D.body.offsetWidth, D.documentElement.offsetWidth),
        Math.max(D.body.clientWidth, D.documentElement.clientWidth)
    );
  };
  
  var mouseX = 0
    , mouseY = 0
    , getMouseCoordinates = function(e) {
    e = e || window.event;
    mouseX = e.pageX;
    mouseY = e.pageY;
  };

  document.onmousemove = getMouseCoordinates;

  var up, down, left, right;
  var setKeyBooleans = function( e, bool ) {
    switch (e.keyCode) {
      case 38: 
        up = bool;
      break;
      case 40:
        down = bool
      break;
      case 37:
        left = bool
      break;
      case 39:
        right = bool
      break;
    }
  }
  handleKeyDown = function( e ) {
    setKeyBooleans( e, true );
  }
  handleKeyUp = function( e ) {
    setKeyBooleans( e, false ); 
  }

  window.addEventListener('keydown', handleKeyDown, true);
  window.addEventListener('keyup', handleKeyUp, true);

  // polyfill: set the window.requestAnimationFrame to the browsers specific version.
  (function() {
    var lastTime = 0
      , vendors = ['ms', 'moz', 'webkit', 'o']
      , x
      , length
      , currTime
      , timeToCall;

    for(x = 0, length = vendors.length; x < length && !window.requestAnimationFrame; ++x) {
        window.requestAnimationFrame = window[vendors[x]+'RequestAnimationFrame'];
        window.cancelAnimationFrame = 
          window[vendors[x]+'CancelAnimationFrame'] || window[vendors[x]+'CancelRequestAnimationFrame'];
    }

    if (!window.requestAnimationFrame)
        window.requestAnimationFrame = function(callback, element) {
            currTime = new Date().getTime();
            timeToCall = Math.max(0, 16 - (currTime - lastTime));
            lastTime = currTime + timeToCall;
            return window.setTimeout(function() { callback(currTime + timeToCall); }, 
              timeToCall);
        };

    if (!window.cancelAnimationFrame)
        window.cancelAnimationFrame = function(id) {
            clearTimeout(id);
        };
  }());

  var canvas = document.getElementById("game");
  canvas.height = getHeight();
  canvas.width = getWidth();

  // draw function is in a closure
  var draw = (function() {

    var PI = Math.PI
      , twoPI = PI * 2
      , speed = 3
      , shipX = 100
      , shipY = 100
      , angle = 2.4
      , degrees
      , cap = function( n, cap ) {
        return n < 0 ? n + cap : n % cap;
      }

    return function() {
      // clear the stage
      ctx.clearRect( 0, 0, canvas.width, canvas.height );
      ctx.save();

      // update angle & speed
      if( left )
        angle -= .1;
      if( right )
        angle += .1;
      if( up && speed < 10 )
        speed += .3;
      if( down && speed > 0 )
        speed -= .10;
      if( speed > 0 )
        speed -= .02;

      // calc new position
      shipX += Math.sin( angle ) * speed;
      shipY -= Math.cos( angle ) * speed;

      shipX = cap( shipX, canvas.width );
      shipY = cap( shipY, canvas.height );
      console.log(shipY);

      // draw the changes

      // position
      ctx.translate( shipX, shipY );
      // rotate
      ctx.rotate( angle );
      // draw
      ctx.beginPath();
      ctx.fillStyle   = 'white';
      ctx.strokeStyle = 'white';
      // ship
      ctx.lineTo(0, -15);
      ctx.lineTo(10, 15);
      ctx.lineTo(0, 13);
      ctx.lineTo(-10, 15);
      // finish
      ctx.fill();
      ctx.stroke();
      ctx.closePath();

      ctx.restore();
    }

  })();
  

  if( canvas.getContext ) {
    var ctx = canvas.getContext("2d");
    // the loop
    (function animloop(){
        requestAnimationFrame( animloop );
        draw();
      })();
  }

}(document, console));

var _gaq=[['_setAccount','UA-34314147-1'],['_trackPageview']];
(function(d,t){var g=d.createElement(t),s=d.getElementsByTagName(t)[0];
g.src=('https:'==location.protocol?'//ssl':'//www')+'.google-analytics.com/ga.js';
s.parentNode.insertBefore(g,s)}(document,'script'));